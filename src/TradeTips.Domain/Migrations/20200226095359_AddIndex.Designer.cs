// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeTips.Domain;

namespace TradeTips.Domain.Migrations
{
    [DbContext(typeof(TradeTipsContext))]
    [Migration("20200226095359_AddIndex")]
    partial class AddIndex
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TradeTips.Domain.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorPersonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlpha")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceClose")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceOpen")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceTMinus1")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceTMinus7")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceTPlus1")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceTPlus2")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceTPlus3")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceTPlus5")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal?>("PriceTPlus7")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StockLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teaser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ArticleId");

                    b.HasIndex("AuthorPersonId");

                    b.HasIndex("PublicationDate");

                    b.HasIndex("StockId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("TradeTips.Domain.ArticleFavorite", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("ArticleFavorites");
                });

            modelBuilder.Entity("TradeTips.Domain.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("TradeTips.Domain.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TradeTips.Domain.DailyPrice", b =>
                {
                    b.Property<int>("DailyPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("DailyPriceId");

                    b.HasIndex("StockId");

                    b.ToTable("DailyPrices");
                });

            modelBuilder.Entity("TradeTips.Domain.FollowedPeople", b =>
                {
                    b.Property<int>("ObserverId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.HasKey("ObserverId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("FollowedPeople");
                });

            modelBuilder.Entity("TradeTips.Domain.IntraDayPrice", b =>
                {
                    b.Property<int>("IntraDayPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(12, 5)");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("IntraDayPriceId");

                    b.HasIndex("StockId");

                    b.ToTable("IntraDayPrices");
                });

            modelBuilder.Entity("TradeTips.Domain.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Hash")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TradeTips.Domain.Stock", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("BargainShare")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obsolete")
                        .HasColumnType("bit");

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("TradeTips.Domain.Tag", b =>
                {
                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TradeTips.Domain.Article", b =>
                {
                    b.HasOne("TradeTips.Domain.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorPersonId");

                    b.HasOne("TradeTips.Domain.Stock", null)
                        .WithMany("Articles")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("TradeTips.Domain.ArticleFavorite", b =>
                {
                    b.HasOne("TradeTips.Domain.Article", "Article")
                        .WithMany("ArticleFavorites")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeTips.Domain.Person", "Person")
                        .WithMany("ArticleFavorites")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeTips.Domain.ArticleTag", b =>
                {
                    b.HasOne("TradeTips.Domain.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeTips.Domain.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeTips.Domain.Comment", b =>
                {
                    b.HasOne("TradeTips.Domain.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeTips.Domain.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeTips.Domain.DailyPrice", b =>
                {
                    b.HasOne("TradeTips.Domain.Stock", null)
                        .WithMany("DailyPrices")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("TradeTips.Domain.FollowedPeople", b =>
                {
                    b.HasOne("TradeTips.Domain.Person", "Observer")
                        .WithMany("Followers")
                        .HasForeignKey("ObserverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradeTips.Domain.Person", "Target")
                        .WithMany("Following")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeTips.Domain.IntraDayPrice", b =>
                {
                    b.HasOne("TradeTips.Domain.Stock", null)
                        .WithMany("IntraDayPrices")
                        .HasForeignKey("StockId");
                });
#pragma warning restore 612, 618
        }
    }
}
